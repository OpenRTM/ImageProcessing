#============================================================
# Component Configuration for Hough
#
# Component specific configuration file is specified from rtc.conf as
# follows.
#
# English reference:  https://openrtm.org/openrtm/en/comp_conf_reference
# Japanese reference: https://openrtm.org/openrtm/ja/comp_conf_reference
#
# This configuration file name should be specified in rtc.conf (or other
# configuration file specified by -f option) by "config_file" property.
#
# <component category>.<component name>.config_file: <config name>.conf
#
# opencv-rtcs.Hough.config_file: Hough.conf
# or
# opencv-rtcs.Hough0.config_file: Hough0.conf
# opencv-rtcs.Hough1.config_file: Hough1.conf
# opencv-rtcs.Hough2.config_file: Hough2.conf
#============================================================
#
# Available component specific configurations as follows.

#============================================================
# Basic profiles
#============================================================
#
# The following basic profiles could be overwrite from component.conf
#
# implementation_id:
# type_name:
# description:
# version:
# vendor:
# category:
# activity_type:
# max_instance:
# language:
# lang_type:
#

#============================================================
# Configuration-set parameter setting
#============================================================
#------------------------------------------------------------
# Configuration sets
#
# conf.[configuration_set_name].[parameter_name]:
#------------------------------------------------------------
# Available configuration parameters
#
# conf.default.canny_thresld1: 100
# conf.default.canny_thresld2: 100
# conf.default.hough_method: PROBABILISTIC
# conf.default.hough_thresld: 50
# conf.default.hough_param1: 50
# conf.default.hough_param2: 10
# conf.default.line_color_R: 255
# conf.default.line_color_G: 0
# conf.default.line_color_B: 0
# conf.default.line_thickness: 2
# conf.default.line_type: 8
#
# Additional configuration-set example named "mode0"
# "mode0" is the Configuration Set name and can be any string. 
#
# conf.mode0.canny_thresld1: 100
# conf.mode0.canny_thresld2: 100
# conf.mode0.hough_method: PROBABILISTIC
# conf.mode0.hough_thresld: 50
# conf.mode0.hough_param1: 50
# conf.mode0.hough_param2: 10
# conf.mode0.line_color_R: 255
# conf.mode0.line_color_G: 0
# conf.mode0.line_color_B: 0
# conf.mode0.line_thickness: 2
# conf.mode0.line_type: 8
#
# Other configuration set named "mode1"
#
# conf.mode1.canny_thresld1: 100
# conf.mode1.canny_thresld2: 100
# conf.mode1.hough_method: PROBABILISTIC
# conf.mode1.hough_thresld: 50
# conf.mode1.hough_param1: 50
# conf.mode1.hough_param2: 10
# conf.mode1.line_color_R: 255
# conf.mode1.line_color_G: 0
# conf.mode1.line_color_B: 0
# conf.mode1.line_thickness: 2
# conf.mode1.line_type: 8

#============================================================
# Active configuration-set
#============================================================
#
# Initial active configuration-set. The following "mode0" is a
# configuration-set name.  A configuration-set named "mode0" should be
# appear in this configuration file as follows.
#
#configuration.active_config: mode0

#============================================================
# Execution context options
#============================================================
#------------------------------------------------------------
# Periodic type ExecutionContext
#
# Other availabilities in OpenRTM-aist
#
# - ExtTrigExecutionContext:   External triggered EC. It is embedded in
#                              OpenRTM library.
# - OpenHRPExecutionContext:   External triggred paralell execution
#                              EC. It is embedded in OpenRTM
#                              library. This is usually used with
#                              OpenHRP3.
# - SimulatorExecutionContext: External triggred paralell execution
#                              EC. It is embedded in OpenRTM
#                              library. This is usually used with
#                              Choreonoid.
# - RTPreemptEC:               Real-time execution context for Linux
#                              RT-preemptive pathed kernel.
# - ArtExecutionContext:       Real-time execution context for ARTLinux
#                              (http://sourceforge.net/projects/art-linux/)
#
# - Setting: (Periodic|ExtTrig|OpenHRP~Simulator~RTPreemptExecutionContext)
# - Default: PeriodicExecutionContext
# - Example:
#exec_cxt.periodic.type: PeriodicExecutionContext

#------------------------------------------------------------
# The execution cycle of ExecutionContext
#
# This option specifies the system wide EC's period. If RTC does not
# specifies EC's periodic rate, this periodic rate will be used.
#
# - Setting: Read/Write, period [Hz]
# - Default: 1000 [Hz]
# - Example:
exec_cxt.periodic.rate:1000.0

#------------------------------------------------------------
# State transition mode settings YES/NO
#
# Default: YES (Default setting is recommended.)
#
# Activating, deactivating and resetting of RTC makes state
# transition.  Some execution contexts execute main logic in different
# thread.  If these flags set to YES, activation, deactivation and
# resetting will be performed synchronously.  In other words, if these
# flags are YES, activation/deactivation/resetting-operations must be
# returned after state transition completed.
#
# "synchronous_transition" will set synchronous transition flags to
# all other synchronous transition flags
# (synchronous_activation/deactivation/resetting.
#
#exec_cxt.sync_transition: YES
#exec_cxt.sync_activation: YES
#exec_cxt.sync_deactivation: YES
#exec_cxt.sync_reset: YES

#------------------------------------------------------------
# Timeout of synchronous state transition [s]
#
# Default: 1.0 [s]
#
# When synchronous transition flags are set to YES, the following
# timeout settings are valid. If "transition_timeout" is set, the
# value will be set to all other timeout of activation/deactivation
# and resetting
#
#exec_cxt.transition_timeout: 0.5
#exec_cxt.activation_timeout: 0.5
#exec_cxt.deactivation_timeout: 0.5
#exec_cxt.reset_timeout: 0.5

#------------------------------------------------------------
# Manager process's CPU affinity setting
#
# This option make the EC bound to specific CPU(s).  Options must
# be one or more comma separated numbers to identify CPU ID. CPU ID
# is started from 0, and maximum number is number of CPU core -1.  If
# invalid CPU ID is specified, all the CPU will be used for the EC.
#
# - Setting: Read/Write, duration [s]
# - Default: 0.5
# - Example:
#   manager.cpu_affinity: 0, 1, 2, ...
#exec_cxt.cpu_affinity: 0

#------------------------------------------------------------
# Specifying Execution Contexts
#
# Default: No default
#
# execution_contexts: None or <EC0>,<EC1>,...
# <EC?>: ECtype(ECname)
#
# RTC can be attached with zero or more Execution
# Contexts. "execution_contexts" option specifies RTC-specific
# attached ECs and its name. If the option is not specified, the
# internal global options or rtc.conf options related to EC will be
# used. If None is specified, no EC will be created.
#
# Availabilities in OpenRTM-aist
#
# - ExtTrigExecutionContext: External triggered EC. It is embedded in
#                            OpenRTM library.
# - OpenHRPExecutionContext: External triggred paralell execution
#                            EC. It is embedded in OpenRTM
#                            library. This is usually used with
#                            OpenHRP3.
# - RTPreemptEC:             Real-time execution context for Linux
#                            RT-preemptive pathed kernel.
# - ArtExecutionContext:     Real-time execution context for ARTLinux
#                            (http://sourceforge.net/projects/art-linux/)
#
# execution_contexts: PeriodicExecutionContext(pec1000Hz), \
#                     PeriodicExecutionContext(pec500Hz)

#------------------------------------------------------------
# EC specific configurations
#
# Default: No default
#
# Each EC can have its own configuration. Individual configuration can
# be specified by using EC type name or EC instance name. Attached ECs
# would be specified in execution_context option like <EC type
# name>(<EC instance name>), ...  EC specific option can be specified
# as follows.
#
# ec.<EC type name>.<option>
# ec.<EC instance name>.<option>
#
# Example:
# ec.PeriodicExecutionContext.sync_transition: NO
# ec.pec1000Hz.rate: 1000
# ec.pec1000Hz.synch_transition: YES
# ec.pec1000Hz.transition_timeout: 0.5
# ec.pec500Hz.rate: 500
# ec.pec500Hz.synch_activation: YES
# ec.pec500Hz.synch_deactivation: NO
# ec.pec500Hz.synch_reset: YES
# ec.pec500Hz.activation_timeout: 0.5
# ec.pec500Hz.reset_timeout: 0.5

# End of Execution context settings
#============================================================

#============================================================
# Port configurations
#============================================================
# InPort options
#   port.inport.<port_name>.* -> InPortBase.init()
#   port.inport.dataport.*    -> InPortBase.init()
#port.inport.dataport.provider_types: corba_cdr, direct, shm_memory
#port.inport.dataport.consumer_types: corba_cdr, direct, shm_memory
#port.inport.dataport.connection_limit: 1
#
# OutPort options
#   port.outport.<port_name>.* -> OutPortBase.init()
#   port.outport.<port_name>.* -> OutPortBase.init()
#port.inport.dataport.provider_types: corba_cdr, direct, shm_memory
#port.inport.dataport.consumer_types: corba_cdr, direct, shm_memory
#port.inport.dataport.connection_limit: 1
#
# Service port options
#   port.corbaport.<port_name>.* -> Base.init() 
#   port.corba.* -> Base.init() 
#None
#
# End of Port configurations
#============================================================

#============================================================
# Configuration sets GUI settings for RTSystemEditor
#
#   Configuration parameters can be operated by GUI widgets on
#   RTSystemEditor's configuration-set dialog. Normally, when designing
#   RTC with RTCBuilder, you can specify what kind of the GUI widget is
#   assigned to each parameter, but you can also specify GUI widget
#   assignment from component.conf.
#
# conf.[configuration_set_name].[parameter_name]:
# conf.__widget__.[parameter_name]: GUI control type for RTSystemEditor
# conf.__constraint__.[parameter_name]: Constraints for the value
#
#------------------------------------------------------------
# GUI control option for RTSystemEditor
#
# Available GUI control options [__widget__]:
#
# conf.__widget__.[widget_name]:
#
# available wdget name:
# - text:          text box [default].
# - slider.<step>: Horizontal slider. <step> is step for the slider.
#                  A range constraints option is required. 
# - spin:          Spin button. A range constraitns option is required.
# - radio:         Radio button. An enumeration constraint is required.
# - checkbox:      Checkbox control. An enumeration constraints is
#                  required. The parameter has to be able to accept a
#                  comma separated list.
# - orderd_list:   Orderd list control.  An enumeration constraint is
#                  required. The parameter has to be able to accept a
#                  comma separated list. In this control, Enumerated
#                  elements can appear one or more times in the given list.
# conf.__widget__.canny_thresld1, slider.1
# conf.__widget__.canny_thresld2, slider.1
# conf.__widget__.hough_method, radio
# conf.__widget__.hough_thresld, slider.1
# conf.__widget__.hough_param1, text
# conf.__widget__.hough_param2, text
# conf.__widget__.line_color_R, text
# conf.__widget__.line_color_G, text
# conf.__widget__.line_color_B, text
# conf.__widget__.line_thickness, text
# conf.__widget__.line_type, radio
#
#------------------------------------------------------------
# GUI control constraint options [__constraints__]:
#
# conf.__constraints__.[parameter_name]:
#
# available constraints:
# - none:         blank
# - direct value: 100 (constant value)
# - range:        <, >, <=, >= and variable "x" can be used.
# - enumeration:  (enum0, enum1, ...)
# - array:        <constraints0>, <constraints1>, ... for only array value
# - hash:         {key0: value0, key1:, value0, ...}
#
# available constraint formats (substitute variable name: "x"):
# - No constraint              : (blank)
# - Direct                     : 100 (read only)
# - 100 or over                : x >= 100
# - 100 or less                : x <= 100
# - Over 100                   : x > 100
# - Less 100                   : x < 100
# - 100 or over and 200 or less: 100 <= x <= 200
# - Over 100 and less 200      : 100 < x < 200
# - Enumeration                : (9600, 19200, 115200)
# - Array                      : x < 1, x < 10, x > 100
# - Hash                       : {key0: 100<x<200, key1: x>=100}
#
# conf.__constraints__.canny_thresld1, 0<=x<=255
# conf.__constraints__.canny_thresld2, 0<=x<=255
# conf.__constraints__.hough_method, (PROBABILISTIC,STANDARD,MULTI_SCALE)
# conf.__constraints__.hough_thresld, 0<=x<=255
# conf.__constraints__.line_type, (8,4,CV_AA)

# conf.__type__.canny_thresld1: int
# conf.__type__.canny_thresld2: int
# conf.__type__.hough_method: string
# conf.__type__.hough_thresld: int
# conf.__type__.hough_param1: double
# conf.__type__.hough_param2: double
# conf.__type__.line_color_R: int
# conf.__type__.line_color_G: int
# conf.__type__.line_color_B: int
# conf.__type__.line_thickness: int
# conf.__type__.line_type: string

