// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __CalibrationService_hh__
#define __CalibrationService_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_CalibrationService
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_CalibrationService
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_CalibrationService
#endif



#ifndef __BasicDataType_hh_EXTERNAL_GUARD__
#define __BasicDataType_hh_EXTERNAL_GUARD__
#include "BasicDataType.hh"
#endif
#ifndef __ExtendedDataTypes_hh_EXTERNAL_GUARD__
#define __ExtendedDataTypes_hh_EXTERNAL_GUARD__
#include "ExtendedDataTypes.hh"
#endif
#ifndef __InterfaceDataTypes_hh_EXTERNAL_GUARD__
#define __InterfaceDataTypes_hh_EXTERNAL_GUARD__
#include "InterfaceDataTypes.hh"
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE ImageCalibService

_CORBA_MODULE_BEG

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ImageList;

  class ImageList_var;

  class ImageList : public _CORBA_Unbounded_Sequence< RTC::CameraImage >  {
  public:
    typedef ImageList_var _var_type;
    inline ImageList() {}
    inline ImageList(const ImageList& _s)
      : _CORBA_Unbounded_Sequence< RTC::CameraImage > (_s) {}

    inline ImageList(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< RTC::CameraImage > (_max) {}
    inline ImageList(_CORBA_ULong _max, _CORBA_ULong _len, RTC::CameraImage* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< RTC::CameraImage > (_max, _len, _val, _rel) {}

  

    inline ImageList& operator = (const ImageList& _s) {
      _CORBA_Unbounded_Sequence< RTC::CameraImage > ::operator=(_s);
      return *this;
    }
  };

  class ImageList_out;

  class ImageList_var {
  public:
    inline ImageList_var() : _pd_seq(0) {}
    inline ImageList_var(ImageList* _s) : _pd_seq(_s) {}
    inline ImageList_var(const ImageList_var& _s) {
      if (_s._pd_seq)  _pd_seq = new ImageList(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~ImageList_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline ImageList_var& operator = (ImageList* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline ImageList_var& operator = (const ImageList_var& _s) {
      if (&_s != this) {
        if (_s._pd_seq) {
          if (!_pd_seq)  _pd_seq = new ImageList;
          *_pd_seq = *_s._pd_seq;
        }
        else if (_pd_seq) {
          delete _pd_seq;
          _pd_seq = 0;
        }
      }
      return *this;
    }
    inline RTC::CameraImage& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline ImageList* operator -> () { return _pd_seq; }
    inline const ImageList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator ImageList& () const { return *_pd_seq; }
#else
    inline operator const ImageList& () const { return *_pd_seq; }
    inline operator ImageList& () { return *_pd_seq; }
#endif
      
    inline const ImageList& in() const { return *_pd_seq; }
    inline ImageList&       inout()    { return *_pd_seq; }
    inline ImageList*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline ImageList* _retn() { ImageList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class ImageList_out;
    
  private:
    ImageList* _pd_seq;
  };

  class ImageList_out {
  public:
    inline ImageList_out(ImageList*& _s) : _data(_s) { _data = 0; }
    inline ImageList_out(ImageList_var& _s)
      : _data(_s._pd_seq) { _s = (ImageList*) 0; }
    inline ImageList_out(const ImageList_out& _s) : _data(_s._data) {}
    inline ImageList_out& operator = (const ImageList_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline ImageList_out& operator = (ImageList* _s) {
      _data = _s;
      return *this;
    }
    inline operator ImageList*&()  { return _data; }
    inline ImageList*& ptr()       { return _data; }
    inline ImageList* operator->() { return _data; }

    inline RTC::CameraImage& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    ImageList*& _data;

  private:
    ImageList_out();
    ImageList_out& operator=(const ImageList_var&);
  };

#ifndef __ImageCalibService_mCalibrationService__
#define __ImageCalibService_mCalibrationService__
  class CalibrationService;
  class _objref_CalibrationService;
  class _impl_CalibrationService;
  
  typedef _objref_CalibrationService* CalibrationService_ptr;
  typedef CalibrationService_ptr CalibrationServiceRef;

  class CalibrationService_Helper {
  public:
    typedef CalibrationService_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_CalibrationService, CalibrationService_Helper> CalibrationService_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_CalibrationService,CalibrationService_Helper > CalibrationService_out;

#endif

  // interface CalibrationService
  class CalibrationService {
  public:
    // Declarations for this interface type.
    typedef CalibrationService_ptr _ptr_type;
    typedef CalibrationService_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_CalibrationService :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    void setImageNumber(::CORBA::Short num);
    ::CORBA::Short getImageNumber();
    RTC::CameraImage* captureCalibImage(::CORBA::Short num);
    RTC::CameraImage* getCalibImage(::CORBA::Short num);
    ImageList* getCalibImages();
    ::CORBA::Boolean removeCalibImage(::CORBA::Short num);
    RTC::CameraInfo getCalibParameter();

    // Constructors
    inline _objref_CalibrationService() : _shortcut(0) { _PR_setobj(0); }  // nil
    _objref_CalibrationService(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_CalibrationService();

    virtual void _enableShortcut(omniServant*, const _CORBA_Boolean*);
    _impl_CalibrationService* _shortcut;
    const _CORBA_Boolean* _invalid;
  
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_CalibrationService(const _objref_CalibrationService&);
    _objref_CalibrationService& operator = (const _objref_CalibrationService&);
    // not implemented

    friend class CalibrationService;
  };

  class _pof_CalibrationService : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_CalibrationService() : _OMNI_NS(proxyObjectFactory)(CalibrationService::_PD_repoId) {}
    virtual ~_pof_CalibrationService();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_CalibrationService :
    public virtual omniServant
  {
  public:
    virtual ~_impl_CalibrationService();

    virtual void setImageNumber(::CORBA::Short num) = 0;
    virtual ::CORBA::Short getImageNumber() = 0;
    virtual RTC::CameraImage* captureCalibImage(::CORBA::Short num) = 0;
    virtual RTC::CameraImage* getCalibImage(::CORBA::Short num) = 0;
    virtual ImageList* getCalibImages() = 0;
    virtual ::CORBA::Boolean removeCalibImage(::CORBA::Short num) = 0;
    virtual RTC::CameraInfo getCalibParameter() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CalibrationService;

_CORBA_MODULE_END



_CORBA_MODULE POA_ImageCalibService
_CORBA_MODULE_BEG

  class CalibrationService :
    public virtual ImageCalibService::_impl_CalibrationService,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~CalibrationService();

    inline ::ImageCalibService::CalibrationService_ptr _this() {
      return (::ImageCalibService::CalibrationService_ptr) _do_this(::ImageCalibService::CalibrationService::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_ImageCalibService
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const ImageCalibService::ImageList& _s);
void operator<<=(::CORBA::Any& _a, ImageCalibService::ImageList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, ImageCalibService::ImageList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const ImageCalibService::ImageList*& _sp);

void operator<<=(::CORBA::Any& _a, ImageCalibService::CalibrationService_ptr _s);
void operator<<=(::CORBA::Any& _a, ImageCalibService::CalibrationService_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, ImageCalibService::CalibrationService_ptr& _s);



inline void
ImageCalibService::CalibrationService::_marshalObjRef(::ImageCalibService::CalibrationService_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_CalibrationService
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_CalibrationService
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_CalibrationService
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_CalibrationService
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_CalibrationService
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_CalibrationService
#endif

#endif  // __CalibrationService_hh__

