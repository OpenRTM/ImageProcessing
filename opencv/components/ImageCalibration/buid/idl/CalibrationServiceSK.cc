// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.

#include "CalibrationService.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_2;



ImageCalibService::CalibrationService_ptr ImageCalibService::CalibrationService_Helper::_nil() {
  return ::ImageCalibService::CalibrationService::_nil();
}

::CORBA::Boolean ImageCalibService::CalibrationService_Helper::is_nil(::ImageCalibService::CalibrationService_ptr p) {
  return ::CORBA::is_nil(p);

}

void ImageCalibService::CalibrationService_Helper::release(::ImageCalibService::CalibrationService_ptr p) {
  ::CORBA::release(p);
}

void ImageCalibService::CalibrationService_Helper::marshalObjRef(::ImageCalibService::CalibrationService_ptr obj, cdrStream& s) {
  ::ImageCalibService::CalibrationService::_marshalObjRef(obj, s);
}

ImageCalibService::CalibrationService_ptr ImageCalibService::CalibrationService_Helper::unmarshalObjRef(cdrStream& s) {
  return ::ImageCalibService::CalibrationService::_unmarshalObjRef(s);
}

void ImageCalibService::CalibrationService_Helper::duplicate(::ImageCalibService::CalibrationService_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

ImageCalibService::CalibrationService_ptr
ImageCalibService::CalibrationService::_duplicate(::ImageCalibService::CalibrationService_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

ImageCalibService::CalibrationService_ptr
ImageCalibService::CalibrationService::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


ImageCalibService::CalibrationService_ptr
ImageCalibService::CalibrationService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

ImageCalibService::CalibrationService_ptr
ImageCalibService::CalibrationService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_CalibrationService _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_CalibrationService* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_CalibrationService;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* ImageCalibService::CalibrationService::_PD_repoId = "IDL:ImageCalibService/CalibrationService:1.0";


ImageCalibService::_objref_CalibrationService::~_objref_CalibrationService() {
  
}


ImageCalibService::_objref_CalibrationService::_objref_CalibrationService(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::ImageCalibService::CalibrationService::_PD_repoId, ior, id, 1)
   ,
   _shortcut(0)
{
  _PR_setobj(this);
}

void*
ImageCalibService::_objref_CalibrationService::_ptrToObjRef(const char* id)
{
  if (id == ::ImageCalibService::CalibrationService::_PD_repoId)
    return (::ImageCalibService::CalibrationService_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::ImageCalibService::CalibrationService::_PD_repoId))
    return (::ImageCalibService::CalibrationService_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}

void
ImageCalibService::_objref_CalibrationService::_enableShortcut(omniServant* _svt, const _CORBA_Boolean* _inv)
{
  if (_svt)
    _shortcut = (_impl_CalibrationService*)_svt->_ptrToInterface(::ImageCalibService::CalibrationService::_PD_repoId);
  else
    _shortcut = 0;
  _invalid  = _inv;
  
}


//
// Code for ImageCalibService::CalibrationService::setImageNumber

// Proxy call descriptor class. Mangled signature:
//  void_i_cshort
class _0RL_cd_6be6d709be93664d_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6be6d709be93664d_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::Short arg_0;
};

void _0RL_cd_6be6d709be93664d_00000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_6be6d709be93664d_00000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Short&)arg_0 <<= _n;

}

const char* const _0RL_cd_6be6d709be93664d_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_6be6d709be93664d_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6be6d709be93664d_00000000* tcd = (_0RL_cd_6be6d709be93664d_00000000*)cd;
  ImageCalibService::_impl_CalibrationService* impl = (ImageCalibService::_impl_CalibrationService*) svnt->_ptrToInterface(ImageCalibService::CalibrationService::_PD_repoId);
  impl->setImageNumber(tcd->arg_0);


}

void ImageCalibService::_objref_CalibrationService::setImageNumber(::CORBA::Short num)
{
  _impl_CalibrationService* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      _s->setImageNumber(num); return;
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_6be6d709be93664d_00000000 _call_desc(_0RL_lcfn_6be6d709be93664d_10000000, "setImageNumber", 15);
  _call_desc.arg_0 = num;

  _invoke(_call_desc);



}


//
// Code for ImageCalibService::CalibrationService::getImageNumber

// Proxy call descriptor class. Mangled signature:
//  _cshort
class _0RL_cd_6be6d709be93664d_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6be6d709be93664d_20000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Short result;
};

void _0RL_cd_6be6d709be93664d_20000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_6be6d709be93664d_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Short&)result <<= _n;

}

const char* const _0RL_cd_6be6d709be93664d_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_6be6d709be93664d_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6be6d709be93664d_20000000* tcd = (_0RL_cd_6be6d709be93664d_20000000*)cd;
  ImageCalibService::_impl_CalibrationService* impl = (ImageCalibService::_impl_CalibrationService*) svnt->_ptrToInterface(ImageCalibService::CalibrationService::_PD_repoId);
  tcd->result = impl->getImageNumber();


}

::CORBA::Short ImageCalibService::_objref_CalibrationService::getImageNumber()
{
  _impl_CalibrationService* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      return _s->getImageNumber();
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_6be6d709be93664d_20000000 _call_desc(_0RL_lcfn_6be6d709be93664d_30000000, "getImageNumber", 15);


  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for ImageCalibService::CalibrationService::captureCalibImage

// Proxy call descriptor class. Mangled signature:
//  _cRTC_mCameraImage_i_cshort
class _0RL_cd_6be6d709be93664d_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6be6d709be93664d_40000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Short arg_0;
  RTC::CameraImage_var result;
};

void _0RL_cd_6be6d709be93664d_40000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_6be6d709be93664d_40000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Short&)arg_0 <<= _n;

}

void _0RL_cd_6be6d709be93664d_40000000::marshalReturnedValues(cdrStream& _n)
{
  (const RTC::CameraImage&) result >>= _n;

}

void _0RL_cd_6be6d709be93664d_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new RTC::CameraImage;
  (RTC::CameraImage&)result <<= _n;

}

const char* const _0RL_cd_6be6d709be93664d_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_6be6d709be93664d_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6be6d709be93664d_40000000* tcd = (_0RL_cd_6be6d709be93664d_40000000*)cd;
  ImageCalibService::_impl_CalibrationService* impl = (ImageCalibService::_impl_CalibrationService*) svnt->_ptrToInterface(ImageCalibService::CalibrationService::_PD_repoId);
  tcd->result = impl->captureCalibImage(tcd->arg_0);


}

RTC::CameraImage* ImageCalibService::_objref_CalibrationService::captureCalibImage(::CORBA::Short num)
{
  _impl_CalibrationService* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      return _s->captureCalibImage(num);
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_6be6d709be93664d_40000000 _call_desc(_0RL_lcfn_6be6d709be93664d_50000000, "captureCalibImage", 18);
  _call_desc.arg_0 = num;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for ImageCalibService::CalibrationService::getCalibImage

// Local call call-back function.
static void
_0RL_lcfn_6be6d709be93664d_60000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6be6d709be93664d_40000000* tcd = (_0RL_cd_6be6d709be93664d_40000000*)cd;
  ImageCalibService::_impl_CalibrationService* impl = (ImageCalibService::_impl_CalibrationService*) svnt->_ptrToInterface(ImageCalibService::CalibrationService::_PD_repoId);
  tcd->result = impl->getCalibImage(tcd->arg_0);


}

RTC::CameraImage* ImageCalibService::_objref_CalibrationService::getCalibImage(::CORBA::Short num)
{
  _impl_CalibrationService* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      return _s->getCalibImage(num);
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_6be6d709be93664d_40000000 _call_desc(_0RL_lcfn_6be6d709be93664d_60000000, "getCalibImage", 14);
  _call_desc.arg_0 = num;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for ImageCalibService::CalibrationService::getCalibImages

// Proxy call descriptor class. Mangled signature:
//  _cImageCalibService_mImageList
class _0RL_cd_6be6d709be93664d_70000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6be6d709be93664d_70000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ImageCalibService::ImageList_var result;
};

void _0RL_cd_6be6d709be93664d_70000000::marshalReturnedValues(cdrStream& _n)
{
  (const ImageCalibService::ImageList&) result >>= _n;

}

void _0RL_cd_6be6d709be93664d_70000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ImageCalibService::ImageList;
  (ImageCalibService::ImageList&)result <<= _n;

}

const char* const _0RL_cd_6be6d709be93664d_70000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_6be6d709be93664d_80000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6be6d709be93664d_70000000* tcd = (_0RL_cd_6be6d709be93664d_70000000*)cd;
  ImageCalibService::_impl_CalibrationService* impl = (ImageCalibService::_impl_CalibrationService*) svnt->_ptrToInterface(ImageCalibService::CalibrationService::_PD_repoId);
  tcd->result = impl->getCalibImages();


}

ImageCalibService::ImageList* ImageCalibService::_objref_CalibrationService::getCalibImages()
{
  _impl_CalibrationService* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      return _s->getCalibImages();
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_6be6d709be93664d_70000000 _call_desc(_0RL_lcfn_6be6d709be93664d_80000000, "getCalibImages", 15);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for ImageCalibService::CalibrationService::removeCalibImage

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cshort
class _0RL_cd_6be6d709be93664d_90000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6be6d709be93664d_90000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Short arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_6be6d709be93664d_90000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_6be6d709be93664d_90000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Short&)arg_0 <<= _n;

}

void _0RL_cd_6be6d709be93664d_90000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_6be6d709be93664d_90000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_6be6d709be93664d_90000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_6be6d709be93664d_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6be6d709be93664d_90000000* tcd = (_0RL_cd_6be6d709be93664d_90000000*)cd;
  ImageCalibService::_impl_CalibrationService* impl = (ImageCalibService::_impl_CalibrationService*) svnt->_ptrToInterface(ImageCalibService::CalibrationService::_PD_repoId);
  tcd->result = impl->removeCalibImage(tcd->arg_0);


}

::CORBA::Boolean ImageCalibService::_objref_CalibrationService::removeCalibImage(::CORBA::Short num)
{
  _impl_CalibrationService* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      return _s->removeCalibImage(num);
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_6be6d709be93664d_90000000 _call_desc(_0RL_lcfn_6be6d709be93664d_a0000000, "removeCalibImage", 17);
  _call_desc.arg_0 = num;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for ImageCalibService::CalibrationService::getCalibParameter

// Proxy call descriptor class. Mangled signature:
//  _cRTC_mCameraInfo
class _0RL_cd_6be6d709be93664d_b0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_6be6d709be93664d_b0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::CameraInfo result;
};

void _0RL_cd_6be6d709be93664d_b0000000::marshalReturnedValues(cdrStream& _n)
{
  (const RTC::CameraInfo&) result >>= _n;

}

void _0RL_cd_6be6d709be93664d_b0000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::CameraInfo&)result <<= _n;

}

const char* const _0RL_cd_6be6d709be93664d_b0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_6be6d709be93664d_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_6be6d709be93664d_b0000000* tcd = (_0RL_cd_6be6d709be93664d_b0000000*)cd;
  ImageCalibService::_impl_CalibrationService* impl = (ImageCalibService::_impl_CalibrationService*) svnt->_ptrToInterface(ImageCalibService::CalibrationService::_PD_repoId);
  tcd->result = impl->getCalibParameter();


}

RTC::CameraInfo ImageCalibService::_objref_CalibrationService::getCalibParameter()
{
  _impl_CalibrationService* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      return _s->getCalibParameter();
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_6be6d709be93664d_b0000000 _call_desc(_0RL_lcfn_6be6d709be93664d_c0000000, "getCalibParameter", 18);


  _invoke(_call_desc);
  return _call_desc.result;


}

ImageCalibService::_pof_CalibrationService::~_pof_CalibrationService() {}


omniObjRef*
ImageCalibService::_pof_CalibrationService::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::ImageCalibService::_objref_CalibrationService(ior, id);
}


::CORBA::Boolean
ImageCalibService::_pof_CalibrationService::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::ImageCalibService::CalibrationService::_PD_repoId))
    return 1;
  
  return 0;
}

const ImageCalibService::_pof_CalibrationService _the_pof_ImageCalibService_mCalibrationService;

ImageCalibService::_impl_CalibrationService::~_impl_CalibrationService() {}


::CORBA::Boolean
ImageCalibService::_impl_CalibrationService::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "setImageNumber")) {

    _0RL_cd_6be6d709be93664d_00000000 _call_desc(_0RL_lcfn_6be6d709be93664d_10000000, "setImageNumber", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getImageNumber")) {

    _0RL_cd_6be6d709be93664d_20000000 _call_desc(_0RL_lcfn_6be6d709be93664d_30000000, "getImageNumber", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "captureCalibImage")) {

    _0RL_cd_6be6d709be93664d_40000000 _call_desc(_0RL_lcfn_6be6d709be93664d_50000000, "captureCalibImage", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getCalibImage")) {

    _0RL_cd_6be6d709be93664d_40000000 _call_desc(_0RL_lcfn_6be6d709be93664d_60000000, "getCalibImage", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getCalibImages")) {

    _0RL_cd_6be6d709be93664d_70000000 _call_desc(_0RL_lcfn_6be6d709be93664d_80000000, "getCalibImages", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "removeCalibImage")) {

    _0RL_cd_6be6d709be93664d_90000000 _call_desc(_0RL_lcfn_6be6d709be93664d_a0000000, "removeCalibImage", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getCalibParameter")) {

    _0RL_cd_6be6d709be93664d_b0000000 _call_desc(_0RL_lcfn_6be6d709be93664d_c0000000, "getCalibParameter", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
ImageCalibService::_impl_CalibrationService::_ptrToInterface(const char* id)
{
  if (id == ::ImageCalibService::CalibrationService::_PD_repoId)
    return (::ImageCalibService::_impl_CalibrationService*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::ImageCalibService::CalibrationService::_PD_repoId))
    return (::ImageCalibService::_impl_CalibrationService*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
ImageCalibService::_impl_CalibrationService::_mostDerivedRepoId()
{
  return ::ImageCalibService::CalibrationService::_PD_repoId;
}

POA_ImageCalibService::CalibrationService::~CalibrationService() {}

