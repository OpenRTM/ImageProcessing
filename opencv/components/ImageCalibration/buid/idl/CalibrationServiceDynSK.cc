// This file is generated by omniidl (C++ backend) - omniORB_4_2. Do not edit.

#include "CalibrationService.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_2_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_RTC_mTime[] = {
  {"sec", CORBA::TypeCode::PR_ulong_tc()},
  {"nsec", CORBA::TypeCode::PR_ulong_tc()}
};

#ifdef _0RL_tc_RTC_mTime
#  undef _0RL_tc_RTC_mTime
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mTime = CORBA::TypeCode::PR_struct_tc("IDL:RTC/Time:1.0", "Time", _0RL_structmember_RTC_mTime, 2, &_0RL_tcTrack);

static CORBA::PR_structMember _0RL_structmember_RTC_mCameraImage[] = {
  {"tm", _0RL_tc_RTC_mTime},
  {"width", CORBA::TypeCode::PR_ushort_tc()},
  {"height", CORBA::TypeCode::PR_ushort_tc()},
  {"bpp", CORBA::TypeCode::PR_ushort_tc()},
  {"format", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"fDiv", CORBA::TypeCode::PR_double_tc()},
  {"pixels", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_octet_tc(), &_0RL_tcTrack)}
};

#ifdef _0RL_tc_RTC_mCameraImage
#  undef _0RL_tc_RTC_mCameraImage
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mCameraImage = CORBA::TypeCode::PR_struct_tc("IDL:RTC/CameraImage:1.0", "CameraImage", _0RL_structmember_RTC_mCameraImage, 7, &_0RL_tcTrack);







static CORBA::TypeCode_ptr _0RL_tc_ImageCalibService_mImageList = CORBA::TypeCode::PR_alias_tc("IDL:ImageCalibService/ImageList:1.0", "ImageList", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_RTC_mCameraImage, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace ImageCalibService { 
  const ::CORBA::TypeCode_ptr _tc_ImageList = _0RL_tc_ImageCalibService_mImageList;
} 
#else
const ::CORBA::TypeCode_ptr ImageCalibService::_tc_ImageList = _0RL_tc_ImageCalibService_mImageList;
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace ImageCalibService { 
  const ::CORBA::TypeCode_ptr _tc_CalibrationService = CORBA::TypeCode::PR_interface_tc("IDL:ImageCalibService/CalibrationService:1.0", "CalibrationService", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr ImageCalibService::_tc_CalibrationService = CORBA::TypeCode::PR_interface_tc("IDL:ImageCalibService/CalibrationService:1.0", "CalibrationService", &_0RL_tcTrack);
#endif

static void _0RL_ImageCalibService_mImageList_marshal_fn(cdrStream& _s, void* _v)
{
  ImageCalibService::ImageList* _p = (ImageCalibService::ImageList*)_v;
  *_p >>= _s;
}
static void _0RL_ImageCalibService_mImageList_unmarshal_fn(cdrStream& _s, void*& _v)
{
  ImageCalibService::ImageList* _p = new ImageCalibService::ImageList;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_ImageCalibService_mImageList_destructor_fn(void* _v)
{
  ImageCalibService::ImageList* _p = (ImageCalibService::ImageList*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const ImageCalibService::ImageList& _s)
{
  ImageCalibService::ImageList* _p = new ImageCalibService::ImageList(_s);
  _a.PR_insert(_0RL_tc_ImageCalibService_mImageList,
               _0RL_ImageCalibService_mImageList_marshal_fn,
               _0RL_ImageCalibService_mImageList_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, ImageCalibService::ImageList* _sp)
{
  _a.PR_insert(_0RL_tc_ImageCalibService_mImageList,
               _0RL_ImageCalibService_mImageList_marshal_fn,
               _0RL_ImageCalibService_mImageList_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, ImageCalibService::ImageList*& _sp)
{
  return _a >>= (const ImageCalibService::ImageList*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const ImageCalibService::ImageList*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_ImageCalibService_mImageList,
                    _0RL_ImageCalibService_mImageList_unmarshal_fn,
                    _0RL_ImageCalibService_mImageList_marshal_fn,
                    _0RL_ImageCalibService_mImageList_destructor_fn,
                    _v)) {
    _sp = (const ImageCalibService::ImageList*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_ImageCalibService_mCalibrationService_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_ImageCalibService_mCalibrationService_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(ImageCalibService::CalibrationService::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_ImageCalibService_mCalibrationService_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, ImageCalibService::CalibrationService_ptr _o)
{
  ImageCalibService::CalibrationService_ptr _no = ImageCalibService::CalibrationService::_duplicate(_o);
  _a.PR_insert(ImageCalibService::_tc_CalibrationService,
               _0RL_ImageCalibService_mCalibrationService_marshal_fn,
               _0RL_ImageCalibService_mCalibrationService_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, ImageCalibService::CalibrationService_ptr* _op)
{
  _a.PR_insert(ImageCalibService::_tc_CalibrationService,
               _0RL_ImageCalibService_mCalibrationService_marshal_fn,
               _0RL_ImageCalibService_mCalibrationService_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = ImageCalibService::CalibrationService::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, ImageCalibService::CalibrationService_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(ImageCalibService::_tc_CalibrationService,
                    _0RL_ImageCalibService_mCalibrationService_unmarshal_fn,
                    _0RL_ImageCalibService_mCalibrationService_marshal_fn,
                    _0RL_ImageCalibService_mCalibrationService_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (ImageCalibService::CalibrationService_ptr)_r->_ptrToObjRef(ImageCalibService::CalibrationService::_PD_repoId);
    else
      _o = ImageCalibService::CalibrationService::_nil();
    return 1;
  }
  return 0;
}

